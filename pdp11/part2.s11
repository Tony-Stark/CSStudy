getWord: mov r0, -(sp) ;-reserve r0,r1,r2 value-;
		 mov r1, -(sp) ;;
		 mov r2, -(sp) ;;
		 mov (r5)+, r0 ;sentence address
		 mov (r5)+, r1 ;sentence length
		 mov (r5)+, r2 ;i
		 while1gw: tst r2
				   beq findLengthgw
				   cmpb (r0), #40
				   beq while1p1gw
				   dec r2
				   br while1p2gw
				   while1p1gw: dec r1
				   		       cmpb(r0)+, #40
				   		       beq while1p1gw
				   		       dec r0
				   		       br while1gw
				   while1p2gw: tst r2
							   beq findLengthgw
							   tst r1
							   beq findLengthgw
							   dec r1
				   		       cmpb (r0)+, #40
				   		       bne while1p2gw
							   dec r0
							   inc r1
				   			   br while1gw
		 findLengthgw: 	mov r0, 10(sp)
						clr 12(sp)
						while2gw: cmpb (r0)+, #40
								  beq returngw
								  tst r1
								  beq returngw
								  inc 10(sp)
								  dec r1
								  br while2gw
		 returngw: mov (sp)+, r2
				   mov (sp)+, r1
				   mov (sp)+, r0
	 rts r5
	 

isWord: mov r0, -(sp) ;12
	mov r1, -(sp) ;10
	mov r2, -(sp) ;6
	mov r3, -(sp) ;4
	mov r4, -(sp) ;2
	mov r5, -(sp) ;0
	add #16, sp
	mov (sp)+, r0		;r0 now holds the length of the word
	mov (sp), r1		;r1 now holds the address of the word
	mov #Dictionary, r2	;r2 will hold the dictionary address
	mov #DicLen, r3		;r3 holds the DicLen address
	movb (r3), r3		;r3 holds the dictionary length
	clr r4				;r4 will hold the current word char iterator
	mov r1, r5
cmpWord: cmpb (r2)+, (r5)+
	bne getNextWord
	inc r4
	cmp r4, r0
	beq wordFoundiw
	cmpb (r2), #100
	beq getNextWord
	br cmpWord
getNextWord: dec r3
	tst r3
	beq notFound
	mov r1, r5
	cmpb (r2)+, #100
	beq cmpWord
	br getNextAux
getNextAux: cmpb (r2)+, #100
	bne getNextAux
	br cmpWord
notFound: add #-18, sp
	mov (sp)+, r5
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	mov (sp)+, r0
	mov (sp), 4(sp)
	mov #0, 6(sp)
	cmp (sp)+, (sp)+
	rts pc
wordFoundiw: add #-18, sp
	mov (sp)+, r5
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	mov (sp)+, r0
	mov (sp), 4(sp)
	mov #1, 6(sp)
	cmp (sp)+, (sp)+
	rts pc
nextComp: ;length           20
		 ;sequence         16
		 ;collection       14
		 mov r0, -(sp)    ;12
		 mov r1, -(sp)    ;10
		 mov r2, -(sp)    ;6
		 mov r3, -(sp)    ;4
		 mov r4, -(sp)    ;2
		 mov r5, -(sp)   ;0
		 mov (sp)+, r0 ;seq addr	
		 mov (sp)+, r1 ;col addr
		 mov (sp), r2  ;length	 
		 clr r3 ;seq iterator
		 clr r4 ; col iterator
		 add #20,sp
		 mov (sp)+, r0
		 dec r0
		 mov r0, r2
		 add @(sp)+, r2
		 mov @(sp),r4
		 findnc: cmp(r4)+,(r2)
				beq step2
				inc r3
				br findnc
		 step2: cmp r3, r0
		 beq cyclicnc
		 inc r3
		 add 14(sp),r3
		 movb (r3),(r2)
		 rts pc
		 cyclicnc: movb @14(sp), r2
		 dec r2
		 br findnc
		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
getWord:
	;param1 sentence address 	-inline
	;param2 sentence length		-inline
	;param3 word index			-inline 		
	;output2	word address	:12
	;output1	word length		:10
	;rts address 				:6
	mov r0, -(sp)	;store 		:4
	mov r1, -(sp)	;store 		:2
	mov r2, -(sp)	;store 		:0
	
	mov (r5)+, r0	;r0 holds sentence address 
	mov (r5)+, r1	;r1 holds sentence length	
	mov (r5)+, r2	;r2 holds the index of the requested word
	dec r1	;initialize r2
	dec r2	;initialize r2
	beq goOut	
	
	whileloop:
	cmpb (r0)+, #40 ;char == space?
	bne skip
	dec r2	;initialize r2
	beq goOut
	
	skip:
	sob r1, whileloop
	goOut:
	
	;now r1 has the address of the word
	mov r0, 12(sp)
	mov #0, 10(sp) ;init length
	
	lenloop:
	cmpb (r0)+, #40 ;char == space?
	beq return
	add #1, 10(sp)
	sob r1, lenloop
	
	return:
	mov (sp)+, r2	;restore
	mov (sp)+, r1	;restore
	mov (sp)+, r0	;restore
rts r5