.= torg + 1000

;Main function manages the program, and sends it to the appropriate
;functions.
main: mov #main, sp			;set stack pointer
	mov #TextList, r1		;r1 stores the address of the head of the node
	jsr pc, nodeHandle		;start handling nodes will
boazMain: clr r0 ;;;;; handles part2 (decoding a secret with only a part of the matrix)
   		  clr r1 ;; clear the registers we want to use (just to make sure)
	  	  clr r3
initCollSeq: cmpb r1, #16.  ;;; this loop is used to initialise the Collection array that will hold the Collection of missing numbers in the matrix,
		    beq initHoles          ;;;;;to be given to nextComp (iterate Sequence), and so as the actual Sequence array. 
			                       ;;;;;Sequence array is for holding the numbers we want to add the ParMat in each iteration, until we found the right matrix
a1729: cmpb r0, #16.        ;;; The taxi number... LOL :P :P :P  This is the loop that is used to find the "lost" (missing) numbers in ParMat; 
	   beq save             ;;; if a number was not found across the whole matrix we save it in Collection and Sequence
	   mov #ParMat, r5
	   add r0, r5
	   cmpb (r5), r1
	   beq stepp			;;; true if number found in matrix, don't add it to Collection/Sequence, but look for the next number that might be missing.  			  
	   inc r0    
	   br a1729
	   
save:  	      mov #Sequence, r5     ;;;;;; used to actually save the "lost" number and go back to look for the next one.
		      add r3, r5
			  movb r1, (r5) 
			  mov #Collection, r5
		      add r3, r5
			  movb r1, (r5)
			  inc r3
stepp:       	clr r0        
               inc r1
               br initCollSeq			   
			  
	   
initHoles: clr r0       ;;;;; Initialises the HolesArray which holds the addresses of the "holes" in the matrix, where we would put back the sequences
		  clr r1                     ;;;;;Elements each time.
while1:  cmpb r0, #16.  ;;; loops through the matrix to find each occurance of a hole (-1)         
		beq step3
		mov #ParMat, r5
		add r0, r5
		cmpb (r5),#-1
		beq AddHole    ;;; if a hole is found, we add it's address to HolesArray; 
		inc r0
		br while1
AddHole:mov #ParMat, r5            ;;;; adds the hole and goes back to find more holes
		add r0, r5 
		mov #HolesArray, r4
		add r1, r4
		add r1, r4
		mov r5, (r4)
		inc r1
		inc r0
		br while1
step3: mov r3, Length ;;;;;;;;; After we have the Sequence (and Collection) and we know where the holes are, we can add the Secret back into the matrix,
	  clr r0            ;;;;;;;;;... See if we decrypted the message right, and until we do iterate through the possible matrices.;
	  clr r1
	  clr r3
AddSequenceToMatrix: cmpb r0, Length  ;;The actual loop to add the sequence to matrix
				    beq step4
					mov #HolesArray, r5
		            add r0, r5
		            add r0, r5
					mov (r5),r3
					movb Sequence(r0),(r3)
					inc r0
					br AddSequenceToMatrix
returnbm: 
		 halt
step4: ;parmat isLegal?    ;;; first we check if the matrix we have now is legal.
	   mov #ParMat,-(sp) 
	   tst -(sp) 
	   jsr pc, isLegal
	   mov (sp)+,r4
	   cmp (sp)+, #1
	   tst r4
	   beq advSeq 
	   mov #Secret, -(sp)
	   mov SecretLen, -(sp)
	   mov #Output, -(sp)
	   mov #ParMat, -(sp)
	   jsr pc, decodeSentence   ;if yes: decodeSentence.
	   add #10, sp
	   
	   tst -(sp)
	   mov SecretLen,-(sp) 
	   mov #Output,-(sp) 
	   jsr pc, isSentence    ; now we have a decoded sentences, we need to check if it was decoded right. ("is it an actual legal sentence?")
	   tst (sp)+
	   tst (sp)+
	   cmp (sp)+, #1
	   beq returnbm
advSeq: mov #Collection, -(sp)   ;;;if the last sentence wasn't the one we were looking for, iterate to the next sequence (and matrix eventually)
       mov #Sequence, -(sp)
	   mov Length, -(sp)
       jsr pc, nextComp
	    mov #Sequence, r4
		cmpb  (r4)+,#10
		bne badman
	   cmpb  (r4)+,#15
		bne badman
	   cmpb  (r4)+,#4
		bne badman
goodman:tst r4
badman: tst r4	   
	   tst (sp)+
	   tst (sp)+
	   tst (sp)+
	   clr r0
	   br AddSequenceToMatrix
		     ;if yes mov to output and we're done.
			 ;if not; nextComp and branch AddSequenceToMatrix
		;if not: nextComp and branch AddSequenceToMatrix
;;;; Alright, now we only have to write the decodeSentenceSentenceand IsSentence

;;;;;;IsSentence;;;;;
;; checks whether an input sentence is legal (all eords are in the 
;; dictionary ...)
;; input:  via stack: the sentence address ,size
;;         via shared memory : Dictionary , and DicLen - amount of words in it
isSentence:;output 22
		   ; secret 20
           ;secretlen 16
		   mov r0, -(sp) ;12
	       mov r1, -(sp) ;10
	       mov r2, -(sp) ;6
	       mov r3, -(sp) ;4
	       mov r4, -(sp) ;2
	       mov r5, -(sp) ;0
		   clr r0
		   clr r1
		   clr r2
		   clr r3
		   mov #1, r4
		   clr r5
		   mov #1,22(sp) ;; store yes as answer (0 will be inputted on failure)
		   cmpb @16(sp), #40   ;; check for leading spaces (illegal)
		   beq falseis
		   mov 16(sp), r5      ;; calculate ending char address
		   add 20(sp), r5      ;;
		   dec r5
		   cmpb (r5), #40      ;; check for closing space (illegal)
		   beq falseis        
		   clr r5
while1is: cmpb r0, 20(sp)     ;; check for end of sentence 
		  beq returnis        ;; we may reach here only if legal sentence was given
		  tst -(sp)           
		  tst -(sp)
		  mov 22(sp),  B1itchesBeCrazy
		  mov 24(sp),  B2itchesBeCrazy
		  mov r4,      B3itchesBeCrazy
		  
		  jsr r5, getWord  ; getting next word
B1itchesBeCrazy: .word 0
B2itchesBeCrazy: .word 0
B3itchesBeCrazy: .word 0
		  
		  mov (sp)+,r2 ;length
		  mov (sp)+,r1 ;address
		  mov r2, r3
		  add r1, r3
		  dec r3
		  cmpb (r3), #41  ;; checking for ! ending
		  beq hasNikud 
		  cmpb (r3), #54  ;; checking for , ending
		  beq hasNikud
		  cmpb (r3), #56  ;; cheking for .  ending
		  beq hasNikud
		  cmpb (r3), #77  ;; checking for ? ending
		  beq hasNikud
toIsWord: tst -(sp)        ;Handles the call to IsWord, meaning-  checking if the word is in dictionary, if it is, we need to check weather to other words are, too.
		  mov r1, -(sp)             ;;;; if not the sentence is not legal at all!
		  mov r2, -(sp)
		  jsr pc, isWord
		  tst (sp)+
		  tst (sp)+
		  cmp (sp)+, #1
		  bne falseis
		  inc r4
		  sub #Output, r3
		  mov r3, r0
		  inc r0
		  jmp while1is
hasNikud: dec r2   ;if the word is punctuated, we want to remove punctuation since it's legal
	     br toIsWord ;...... and obviously branch to "toIsWord" that handles the call to isWord
falseis: mov #0,22(sp) ; if it isn't sa legal sentence we want to return 0 (False)
		 br returnis
returnis:        mov (sp)+, r5    ;12   returns the stack to original state
				 mov (sp)+, r4     ;10
				 mov (sp)+, r3    ;6
				 mov (sp)+, r2    ;4
				 mov (sp)+, r1    ;2
			   	 mov (sp)+, r0
rts pc 		
;if yes mov to output and we're done.
;if not; nextComp and branch AddSequenceToMatrix
;if not: nextComp and branch AddSequenceToMatrix
;; isSentence - receives sentence and decodes it
;; inpuut : stack : sentence address , and lenght , decoding matrix
;;          
;;  output: recieved via stack: Output address
decodeSentence: mov r0, -(sp)
				mov r1, -(sp)
				mov r2, -(sp)
				mov r3, -(sp)
				mov r4, -(sp)
				mov r5, -(sp)
mov 22(sp),r0  ;;  ;; size
mov 24(sp), r1 ;;  souce address
mov 20(sp), r2 ;;  destinaition address
for1ds: movb (r1)+, r3  ;; get next byte to translate
		bic #177400 ,r3
		mov r3, -(sp)
	    mov r2, -(sp)
        mov 22(sp), -(sp)
		jsr pc, decode   ;; translate it
		add #6, sp
		inc r2
		sob r0, for1ds   ;; untill you have finished translating the sentence
		mov (sp)+, r5
		mov (sp)+, r4
		mov (sp)+, r3
		mov (sp)+, r2
		mov (sp)+, r1
		mov (sp)+, r0
		rts pc
        
;; decode - getting bit and translates it into inputted addres using inputted translation matrix
;; input :  stack : bit value to translat ,
;;                   address to store the translated value
;;                   matrix for decoding
decode: mov r1, -(sp)	;push r1 on stack 10
	mov r2, -(sp)		;push r2 on stack 6
	mov r3, -(sp)		;push r3 on stack 4
	mov r4, -(sp)		;push r4 on stack 2
	mov r5, -(sp)		;push r5 on stack 0
	;tst -(sp) 			;allocate memory for isLegal result
	;mov 14(sp), -(sp)	;push matrix on stack
	;jsr pc, isLegal
	;tst (sp)+			;check result
	;beq decodeIllegal	;if illegal, save byte in output address unchanged
	;tst (sp)+			;clear additional matrix address from stack
	mov 14(sp), r1     	;r1 now has the address of the first key
	movb 20(sp), r4		;the address of the first Text byte is stored in r4
	bic #177400, r4
	movb r4, r2			;move value of current Text byte to r2
	bic #177760, r2		;store y value in r2
	movb r4, r3 		;move value of current Text byte to r3
	bic #177417, r3			;clear first 4 bits
	ash #-4, r3			;store x value in r3
	br deyfind
	
;yfind finds the address of the key which equals to y
deyfind:  movb (r1)+, r4		;first map key is stored in r4, and r1 is advanced by 1
	bic #177400, r4
	cmp r4, r2				;if y part is equal to the value of the key, continue
	bne deyfind
	add #-1, r1				;r1 is decremented to account for the previous incrementation 
	mov r1, r4				;r4 stores the address of the y key
	mov 14(sp), r1		;reset key pointer
	
;dexfind finds the address of the key which equals to x
dexfind:  movb (r1)+, r5		;first map key is stored in r5, and r1 is advanced by 1
	bic #177400 ,r5
	cmp r5, r3				;if x part is equal to the value of the key, continue
	bne dexfind
	add #-1, r1				;r1 is decremented to account for the previous incrementation
	mov r1, r5 				;r5 stores address of x key
	mov 14(sp), r1		;reset key pointer

;diff calculates the location of x, y
dediff:   sub 14(sp), r4	;r4 now has the serial place of y in the key map
	sub 14(sp), r5		;r5 now has the serial place of x in the key map
	mov r4, r3				;r3 now has the serial place of y in the key map
	clr r2					;r2 is cleared to enable division of r2, r3
	clr r4					;r4 is cleared to enable division of r4, r5
	div #4, r2				;r2 stores the row of y, r3 stores the column of y
	div #4, r4				;r4 stores the row of x, r5 stores the column of x
	cmp r2, r4			;if rows are equal, proceed to case A
	beq deCaseA			
	cmp r3, r5				;if columns are equal, proceed to case B
	beq deCaseB
	br deCaseC				;else, proceed to case C

deCaseA:  cmp r3, #0		;if column of y is 3, it will be cleared in order to enable cyclic movement
	beq deSubr3A
	cmp r5, #0			;if column of x is 3, it will be cleared in order to enable cyclic movement
	beq deSubr5A
	sub #1, r3				;y is moved right in a cyclic order
	sub #1, r5				;x is moved right in a cyclic order
	br degetLower				;proceed to calculate value of W
deSubr3A: mov #4, r3				;column of y is cleared to enable cyclic movement
		br deCaseA
deSubr5A: mov #4, r5				;column of x is cleared to enable cyclic movement
		br deCaseA
		
deCaseB:  cmp r2, #0			;if row of y is 3, it will be cleared in order to enable cyclic movement
	beq deSubr2B
	cmp r4, #0				;if row of x is 3, it will be cleared in order to enable cyclic movement
	beq deSubr4B
	sub #1, r2				;y is moved down in a cyclic order
	sub #1, r4				;x is moved down in a cyclic order
	br degetLower				;proceed to calculate value of W
deSubr2B: mov #4, r2				;row of y is cleared to enable cyclic movement
		br deCaseB
deSubr4B: mov #4, r4				;row of x is cleared to enable cyclic movement
		br deCaseB
		
deCaseC: movb r3, r1
	bic #177400, r1
			;column of y is stored in a temp register
	movb r5, r3	
	bic #177400, r3
	;column of y is changed to the column of x
	movb r1, r5	
	bic #177400, r5
	;column of x is changed to the column of y
	br degetLower				;proceed to calculate value of W

;gets lower 4 bits of output
degetLower: cmp r2, #0		;if row of lower 4 bits is zero, the loop is finished
	beq degetUpper
	add #4, r3				;4 is added to the r3 register to get the place of the lower bits in the map
	sob r2, degetLower
	br degetUpper				;proceed to calculate upper 4 bits

;gets higher 4 bits of output
degetUpper: cmp r4, #0		;if row of higher 4 bits is zero, the loop is finished
	beq deFinal
	add #4, r5				;4 is added to the r5 register to get the place of the higher bits in the map
	sob r4, degetUpper
	br deFinal				;the serial place of the lower 4 bits in the map is stored in r3, and that of the higher - in r5
	
;calculates output byte and stores it in the output label
;checks if program has completed its operation
deFinal:
	add 14(sp), r3		;the address of the first key is added to r3 to get the address of the value of lower 4 bits
	add 14(sp), r5		;the address of the first key is added to r5 to get the address of the value of upper 4 bits
	movb (r3), r2
	bic #177400 ,r2
	;r2 now stores value of lower 4 bits
	movb (r5), r4	
	bic #177400, r4
	;r4 now stores value of higher 4 bits
	ash #4, r4				;r4 is shifted 4 times to the left to enable addition of lower 4 bits
	add r2, r4				;r4 now stores 8 bits: first the lower 4, and then the upper 4. This is the needed result.
	mov 16(sp), r1			;address of first Output byte is added to r1
	movb r4, (r1)	
	;the encryption/decryption result is saved in the Output label 
	mov (sp)+, r5
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	rts pc

	
;; getWord 
;; input: stack: sentence its length and desired word number (i)
;; output: space allocated in stack: the address and size of the i word of the sentence 	
getWord: mov r0, -(sp) ;-reserve r0,r1,r2 value-;
    mov r1, -(sp) ;;
    mov r2, -(sp) ;;
    mov r3, -(sp) ;;
    mov r4, -(sp) ;;
    mov (r5)+, r0 ;sentence address
    mov (r5)+, r1 ;sentence length
    mov (r5)+, r2 ;i
    clr r3
				   
eat_space: cmpb (r0), #40  ;; munch on tasty preceeding spaces
    bne worddd              ;; found first word
    inc r0
    dec r1
    br eat_space
	   
worddd: cmp r2,#1          ;; check the word countre if its the desired one
    beq shava             ;; if it is then go do your thing
    dec r2                 ;; else decrease word counter
reach_space:  cmpb (r0), #40 ;; munch non space chars
    beq spaaaace             ;; reached space - continue on getting to next word
    inc r0
    dec r1
    br reach_space

spaaaace: br eat_space
shava:     mov r0,16(sp)        ; store word address
callen:    cmpb (r0), #40      ; measure the words size
	beq ddddone
	inc r3
    inc r0
    dec r1
    beq ddddone
    br callen
       
ddddone:  mov r3,14(sp) 		   ; store the desired words size
	
returngw: mov (sp)+, r4
		  mov (sp)+, r3
		  mov (sp)+, r2
		  mov (sp)+, r1
		  mov (sp)+, r0
	 rts r5
;**********IsWord- checks weather the word belongs to the language defined by the Dictionary*********;
;****InParamters:************************************************************************************;
;****--Word: through stack, the word we want to check	*********************************************;
;****--Length: the length of the word from above	*************************************************;
;***InCommonArea: Dictionary and it's length (DicLen)************************************************;
;***OutParamters: ***********************************************************************************;
;****InStack: True =1, False =0;*********************************************************************;

isWord: mov r0, -(sp) ;12
	   mov r1, -(sp) ;10
	   mov r2, -(sp) ;6
	   mov r3, -(sp) ;4
	   mov r4, -(sp) ;2
	   mov r5, -(sp) ;0
	   add #16, sp
	   mov (sp)+, r0       ;r0 now holds the length of the word
	   mov (sp), r1        ;r1 now holds the address of the word
	   mov #Dictionary, r2 ;r2 will hold the dictionary address
	   mov #DicLen, r3     ;r3 holds the DicLen address
	   movb (r3), r3       ;r3 holds the dictionary length
	   clr r4              ;r4 will hold the current word char iterator
	   mov r1, r5
cmpWord: cmpb (r2)+, (r5)+   ;; this compares a word from the dictionary with the word we want to check.
	   bne getNextWord       ;; if it the words are'nt equal and we didn't reach the end of the dictionary, we want to check the next word
	   inc r4
	   cmp r4, r0
	   beq wordFoundiw
	   cmpb (r2), #100
	   beq getNextWord
	   br cmpWord
getNextWord: dec r3
	   tst r3
	   beq notFound
	   mov r1, r5
	   cmpb (r2)+, #100
	   beq cmpWord
	   br getNextAux
	   getNextAux: cmpb (r2)+, #100
	   bne getNextAux
	   br cmpWord
notFound: add #-18, sp ;;word isn't in dictionary, so, return stack to previous state and return "0" (false)
	      mov (sp)+, r5
	      mov (sp)+, r4
	      mov (sp)+, r3
	      mov (sp)+, r2
	      mov (sp)+, r1
	      mov (sp)+, r0
	      mov (sp), 4(sp)
	      mov #0, 6(sp)
	      rts pc
wordFoundiw: add #-18, sp   ;; word was found in dictionary, therefore return stack to original state and return "1" (true)
	   mov (sp)+, r5
	   mov (sp)+, r4
	   mov (sp)+, r3
	   mov (sp)+, r2
	   mov (sp)+, r1
	   mov (sp)+, r0
	   mov (sp), 4(sp)
	   mov #1, 6(sp)
	   rts pc

; nextComp procedure - works as requested in the homework:
; input : 
; stack :  series of numbers
          ; sequence made frpm the series
          ; length of both arrays           
;output:  into the address provided via the sack (#2) the
;         next sequence over the inputted series (as descrived in the homework)       
nextComp: ;collection           22
         ;sequence         20
         ;length       16
		 ;rts address      14
         mov r0, -(sp)    ;12
         mov r1, -(sp)    ;10
         mov r2, -(sp)    ;6
         mov r3, -(sp)    ;4
         mov r4, -(sp)    ;2
         mov r5, -(sp)   ;0
		 ;add #14,sp
         mov 22(sp), r1 ;col addr    
         mov 20(sp), r2 ;seq addr
         mov 16(sp), r0  ;length   
         clr r3 ;seq iterator
         clr r4 ; col index
         dec r0 ;length - 1;
		 mov r0, r5
         ;mov r0, r2
         add r0, r2
		 mov 16(sp), r3
		 inc r3
		 
findnc:tst r3        ;; finding which value  in the series is held by 
		beq return    ;; current sequence object
		cmpb (r1)+,(r2)
        beq easync
        sob r0, findnc
cyclicnc: mov 22(sp), r1  ; cyclyc "promotion" - ccurs due to "carry" after addition
		movb (r1), (r2)
		dec r2
		dec r3
		mov r5, r0
        br findnc
easync:movb (r1), (r2) ; "promoting" current sequence object
     	dec r3
        br return
return: mov (sp)+, r5    ;12
		mov (sp)+, r4     ;10
		mov (sp)+, r3    ;6
		mov (sp)+, r2    ;4
		mov (sp)+, r1    ;2
	   	mov (sp)+, r0
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;for boazMain:
HolesArray: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Sequence: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Collection: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
Length: .byte 0		 
.even 

;This branch cleared the 40 register and sends the program back to main,
;to complete the execution of the second part.
noNewNode: clr r0 			;clear register		
	rts pc					;return to main

;This branch sends mode, matrix, output label and text label information to
;the system function using the stack, and text length using r0.
nodeHandle: mov (r1), -(sp)	;push address of first node on stack
	mov 6(r1), -(sp)		;push address of output label on stack
	mov #Keys, -(sp)		;push address of first matrix on stack
	mov 4(r1), -(sp)		;push address of mode on stack
	mov 2(r1), r0			;r0 will hold the test length
	br systemAux			;systemAux manages the system function

;This branch is an auxiliary for system, used to check if the node is legal,
;and if so, send the program to fetch the relevant information.
systemAux: mov r1, -(sp)	;push r1 on stack
	mov r2, -(sp)			;push r2 on stack
	mov r3, -(sp)			;push r3 on stack
	clr r1					;r1 is the byte iterator
	clr r2					;r2 is the matrix iterator
	clr r3					;r3 is a temporary register
	jsr pc, system			;send program to the system function
	mov (sp)+, r3			;after completion of system, pop registers
	mov (sp)+, r2			;pop r2 from register
	mov (sp)+, r1			;pop r1 from register
	add #8., sp				;clear trash on stack
	mov 10(r1), r1			;check if there's another node to work on
	tst r1					;r1 holds the address of next node
	beq noNewNode			;if null, go to noNewNode branch
	br nodeHandle			;else, start handling of new node
	
;System function, as described in the PDF. Receives addresses of the text,
;output label, matrix, and a mode using the stack. In addition, KeysLen and
;r0 contain the number of matrices and text length respectively. 
system: jsr pc, matrixCycle	;check for matrix cyclic movement
	mov r0, -(sp)			;push text length on stack
	mov r1,	-(sp)			;push byte index on stack
	jsr pc, systemEnd		;check if all bytes have been dealt with
	tst (sp)+				;allocate memory for address of next legal matrix
	jsr pc, getMatrix		;get address of next legal matrix
	inc r2					;matrix index is incremented
	tst -(sp)				;allocate memory for isLegal result
	jsr pc, isLegal			;check if current matrix is legal
	tst (sp)+				
	beq illegalMatrix		;if illegal, proceed to next byte
	mov 20(sp), -(sp)		;push text address on stack			
	add r1, (sp)			;add byte index
	inc r1					;increment byte index
	mov 20(sp), -(sp)		;push output label on stack
	mov 4(sp), -(sp)		;push matrix address on stack
	mov 20(sp), -(sp)		;push mode on stack
	jsr pc, check			;start encoding/decoding
	add #10., sp
	add #1, 14(sp)
	br system

;Function used to enable cyclic movement of matrices. If matrix 
;index (r2) is the same as KeysLen, then clear r2.
matrixCycle: mov #KeysLen, r5
	cmp (r5), r2
	beq newMatCycle
	rts pc
newMatCycle: clr r2
	clr r5
	rts pc 

;Function checks if all bytes have been dealt with, and if so 
;sends the program to continue to the next node.
systemEnd: cmp 2(sp), 4(sp)	;compare text length and byte index
	beq endLength			;if equal, continue to next node
	rts pc					;return to system
endLength: cmp (sp)+, (sp)+
	tst (sp)+
	rts pc

;Function used to get the next matrix in a cyclic manner. Note that the
;function doesn't have to be legal.
getMatrix: mov r2, -(sp)	;push matrix index on stack
	clr 4(sp)				;clear output stack memory
	inc r2					;increment r2 for loop
	jsr pc, getNextMatrix	;gets address of next matrix
	add 20(sp), 4(sp)		;2(sp) now holds the address of the next matrix
	mov (sp)+, r2			;pop value of r2 from stack
	rts pc					;address of next matrix is now on stack
getNextMatrix: add #16., 6(sp)	
	dec r2
	tst r2
	bne getNextMatrix
	sub #16., 6(sp)
	rts pc

;Branch used to send the current byte unchanged to the output label,
;in case the matrix is illegal. 
illegalMatrix: mov r4, -(sp)
	mov r5, -(sp)
	mov 22(sp), r4	;push output label address
	mov 24(sp), r5	;r5 now holds the address of the input text
	add r1, r5		;add byte index to r5
	movb (r5), (r4)	;move unchanged byte to output
	inc r1			;increment byte index
	mov (sp)+, r5
	mov (sp)+, r4
	tst (sp)+
	inc 14(sp)
	br system		;continue to next byte

;Function which begins the encryption/decryption process. Just like the
;branch from the last assignment, with few adjustments.
check:  mov r1, -(sp)
	mov r2, -(sp)
	mov r3, -(sp)
	mov r4, -(sp)
	mov 14(sp), r1     	    ;r1 now has the address of the first key
	mov 20(sp), r4			;the address of the first Text byte is stored in r4
	movb (r4), r4			;current char is stored in r4
	bic #177400, r4			;bit clear used to get specific char 
	mov r4, r2			    ;move value of current Text byte to r2
	bic #360, r2			;store y value in r2
	mov r4, r3 		     	;move value of current Text byte to r3
	bic #3, r3				;clear first 4 bits
	ash #-4, r3				;store x value in r3
	
;yfind finds the address of the key which equals to y
yfind:  movb (r1)+, r4		;first map key is stored in r4, and r1 is advanced by 1
	cmp r4, r2				;if y part is equal to the value of the key, continue
	bne yfind
	add #-1, r1				;r1 is decremented to account for the previous incrementation 
	mov r1, r4				;r4 stores the address of the y key
	mov 14(sp), r1		;reset key pointer
	
;xfind finds the address of the key which equals to x
xfind:  movb (r1)+, r5		;first map key is stored in r5, and r1 is advanced by 1
	cmp r5, r3				;if x part is equal to the value of the key, continue
	bne xfind
	add #-1, r1				;r1 is decremented to account for the previous incrementation
	mov r1, r5 				;r5 stores address of x key
	mov 14(sp), r1		;reset key pointer

;diff calculates the location of x, y and decides whether to encrypt
;or decrypt
diff:   sub 14(sp), r4	;r4 now has the serial place of y in the key map
	sub 14(sp), r5		;r5 now has the serial place of x in the key map
	mov r4, r3				;r3 now has the serial place of y in the key map
	clr r2					;r2 is cleared to enable division of r2, r3
	clr r4					;r4 is cleared to enable division of r4, r5
	div #4, r2				;r2 stores the row of y, r3 stores the column of y
	div #4, r4				;r4 stores the row of x, r5 stores the column of x
	mov 12(sp), r1			;r1 stores address of Mode
	cmp r1, #0         	    ;check mode number
	beq encrypt				;if mode number is 0, proceed to encryption
	br decrypt				;else, proceed to decryption

;checks for cases
encrypt: cmp r2, r4			;if rows are equal, proceed to case A
	beq eCaseA			
	cmp r3, r5				;if columns are equal, proceed to case B
	beq eCaseB
	br CaseC				;else, proceed to case C

eCaseA:  cmp r3, #3			;if column of y is 3, it will be cleared in order to enable cyclic movement
	beq eSubr3A
	cmp r5, #3				;if column of x is 3, it will be cleared in order to enable cyclic movement
	beq eSubr5A
	add #1, r3				;y is moved right in a cyclic order
	add #1, r5				;x is moved right in a cyclic order
	br getLower				;proceed to calculate value of W
eSubr3A: mov #-1, r3				;column of y is cleared to enable cyclic movement
		br eCaseA
eSubr5A: mov #-1, r5				;column of x is cleared to enable cyclic movement
		br eCaseA
		
eCaseB:  cmp r2, #3			;if row of y is 3, it will be cleared in order to enable cyclic movement
	beq eSubr2B
	cmp r4, #3				;if row of x is 3, it will be cleared in order to enable cyclic movement
	beq eSubr4B
	add #1, r2				;y is moved down in a cyclic order
	add #1, r4				;x is moved down in a cyclic order
	br getLower				;proceed to calculate value of W
eSubr2B: mov #-1, r2				;row of y is cleared to enable cyclic movement
		br eCaseB
eSubr4B: mov #-1, r4				;row of x is cleared to enable cyclic movement
		br eCaseB
		
CaseC: movb r3, r1			;column of y is stored in a temp register
	movb r5, r3				;column of y is changed to the column of x
	movb r1, r5				;column of x is changed to the column of y
	br getLower				;proceed to calculate value of W

;checks for cases
decrypt:cmp r2, r4			;if rows are equal, proceed to case A
	beq dCaseA
	cmp r3, r5				;if columns are equal, proceed to case b
	beq dCaseB
	br CaseC				;else, proceed to case C
	
dCaseA:
	cmp r3, #0				;if column of w is 0, it will be added 4 in order to enable cyclic movement
	beq dSubr3A
	cmp r5, #0				;if column of z is 0, it will be added 4 in order to enable cyclic movement
	beq dSubr5A
	add #-1, r3				;w is moved left in a cyclic movement
	add #-1, r5				;z is moved left in a cyclic movement
	br getLower				;proceed to calculate value of y
dSubr3A: mov #4, r3			;column of w is set to 4 to enable cyclic left movement
		br dCaseA
dSubr5A: mov #4, r5			;column of z is set to 4 to enable cyclic left movement
		br dCaseA	
		
dCaseB:						;if row of w is 0, it will be added 4 in order to enable cyclic movement
	cmp r2, #0
	beq dSubr2B
	cmp r4, #0				;if row of z is 0, it will be added 4 in order to enable cyclic movement
	beq dSubr4B
	add #-1, r2				;w is moved up in a cyclic movement
	add #-1, r4				;z is moved up in a cyclic movement
	br getLower				;proceed to calculate value of y
dSubr2B: mov #4, r2			;row of w is set to 4 to enable cyclic left movement
		br dCaseB
dSubr4B: mov #4, r4			;row of z is set to 4 to enable cyclic left movement
		br dCaseB

;gets lower 4 bits of output
getLower: cmp r2, #0		;if row of lower 4 bits is zero, the loop is finished
	beq getUpper
	add #4, r3				;4 is added to the r3 register to get the place of the lower bits in the map
	sob r2, getLower
	br getUpper				;proceed to calculate upper 4 bits

;gets higher 4 bits of output
getUpper: cmp r4, #0		;if row of higher 4 bits is zero, the loop is finished
	beq Final
	add #4, r5				;4 is added to the r5 register to get the place of the higher bits in the map
	sob r4, getUpper
	br Final				;the serial place of the lower 4 bits in the map is stored in r3, and that of the higher - in r5
	
;calculates output byte and stores it in the output label
;checks if program has completed its operation
Final:
	add 14(sp), r3		;the address of the first key is added to r3 to get the address of the value of lower 4 bits
	add 14(sp), r5		;the address of the first key is added to r5 to get the address of the value of upper 4 bits
	movb (r3), r2			;r2 now stores value of lower 4 bits
	movb (r5), r4			;r4 now stores value of higher 4 bits
	ash #4, r4				;r4 is shifted 4 times to the left to enable addition of lower 4 bits
	add r2, r4				;r4 now stores 8 bits: first the lower 4, and then the upper 4. This is the needed result.
	mov 16(sp), r1			;address of first Output byte is added to r1
	movb r4, (r1)			;the encryption/decryption result is saved in the Output label 
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	rts pc

;Function used to decide if a matrix is legal, that is - has all the numbers
;necessary for it to be legal. Receives address of matrix on stack, and sends
;the result on stack. 
isLegal: 	mov r0, -(sp)
	mov r1, -(sp)
	mov r2, -(sp)
	mov r3, -(sp)
	mov r4, -(sp)
	mov 16(sp), r0			;address of first matrix is stored in r0
	mov r0, r4				;r4 won't be changed
	clr r1					;r1 cleared and prepared for storing the current element
	clr r2					;r2 holds the matrix index
	br isLegalLoop
isLegalLoop: movb (r0)+, r3 ;r3 stores the matrix element value
	cmp r3, r1				;check if matrix element holds the checked key
	beq isLegalAux			;if index element equals key, continue
	cmp r2, #17
	beq isIllegal
	add #1, r2				;matrix index is 
	br isLegalLoop
isLegalAux: cmp r1, #17
	beq indeedLegal
	add #1, r1 				;increment index
	clr r2					;matrix index is cleared
	mov r4, r0
	br isLegalLoop
isIllegal:
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	mov (sp)+, r0
	mov #0, 2(sp)
	rts pc
indeedLegal:
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	mov (sp)+, r0
	mov #1, 2(sp)
	rts pc

;Encode function, as described in the PDF. 
encode: mov r1, -(sp)	;push r1 on stack
	mov r2, -(sp)		;push r2 on stack
	mov r3, -(sp)		;push r3 on stack
	mov r4, -(sp)		;push r4 on stack
	mov r5, -(sp)		;push r5 on stack
	mov 14(sp), -(sp)	;push matrix on stack
	tst -(sp)			;allocate memory for isLegal result
	jsr pc, isLegal
	tst (sp)+			;check result
	beq encodeIllegal	;if illegal, save byte in output address unchanged
	tst (sp)+			;clear additional matrix address from stack
	mov 14(sp), r1     	;r1 now has the address of the first key
	movb 20(sp), r4		;the address of the first Text byte is stored in r4
	movb r4, r2			;move value of current Text byte to r2
	bic #360, r2		;store y value in r2
	movb r4, r3 		;move value of current Text byte to r3
	bic #3, r3			;clear first 4 bits
	ash #-4, r3			;store x value in r3
	br enyfind

;if matrix is illegal, save unchanged byte and exit
encodeIllegal:	mov 20(sp), r1		;r1 holds input byte
	mov 16(sp), r2;		;r2 holds output label
	movb r1, (r2)		;move unchanged byte to output label
	mov (sp)+, r5
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	rts pc
	
;yfind finds the address of the key which equals to y
enyfind:  movb (r1)+, r4		;first map key is stored in r4, and r1 is advanced by 1
	cmp r4, r2				;if y part is equal to the value of the key, continue
	bne enyfind
	add #-1, r1				;r1 is decremented to account for the previous incrementation 
	mov r1, r4				;r4 stores the address of the y key
	mov 14(sp), r1		;reset key pointer
	
;enxfind finds the address of the key which equals to x
enxfind:  movb (r1)+, r5		;first map key is stored in r5, and r1 is advanced by 1
	cmp r5, r3				;if x part is equal to the value of the key, continue
	bne enxfind
	add #-1, r1				;r1 is decremented to account for the previous incrementation
	mov r1, r5 				;r5 stores address of x key
	mov 14(sp), r1		;reset key pointer

;diff calculates the location of x, y
endiff:   sub 14(sp), r4	;r4 now has the serial place of y in the key map
	sub 14(sp), r5		;r5 now has the serial place of x in the key map
	mov r4, r3				;r3 now has the serial place of y in the key map
	clr r2					;r2 is cleared to enable division of r2, r3
	clr r4					;r4 is cleared to enable division of r4, r5
	div #4, r2				;r2 stores the row of y, r3 stores the column of y
	div #4, r4				;r4 stores the row of x, r5 stores the column of x
	cmp r2, r4			;if rows are equal, proceed to case A
	beq CaseA			
	cmp r3, r5				;if columns are equal, proceed to case B
	beq CaseB
	br enCaseC				;else, proceed to case C

CaseA:  cmp r3, #3			;if column of y is 3, it will be cleared in order to enable cyclic movement
	beq Subr3A
	cmp r5, #3				;if column of x is 3, it will be cleared in order to enable cyclic movement
	beq Subr5A
	add #1, r3				;y is moved right in a cyclic order
	add #1, r5				;x is moved right in a cyclic order
	br engetLower				;proceed to calculate value of W
Subr3A: mov #-1, r3				;column of y is cleared to enable cyclic movement
		br CaseA
Subr5A: mov #-1, r5				;column of x is cleared to enable cyclic movement
		br CaseA
		
CaseB:  cmp r2, #3			;if row of y is 3, it will be cleared in order to enable cyclic movement
	beq Subr2B
	cmp r4, #3				;if row of x is 3, it will be cleared in order to enable cyclic movement
	beq Subr4B
	add #1, r2				;y is moved down in a cyclic order
	add #1, r4				;x is moved down in a cyclic order
	br engetLower				;proceed to calculate value of W
Subr2B: mov #-1, r2				;row of y is cleared to enable cyclic movement
		br CaseB
Subr4B: mov #-1, r4				;row of x is cleared to enable cyclic movement
		br CaseB
		
enCaseC: movb r3, r1			;column of y is stored in a temp register
	movb r5, r3				;column of y is changed to the column of x
	movb r1, r5				;column of x is changed to the column of y
	br engetLower				;proceed to calculate value of W

;gets lower 4 bits of output
engetLower: cmp r2, #0		;if row of lower 4 bits is zero, the loop is finished
	beq engetUpper
	add #4, r3				;4 is added to the r3 register to get the place of the lower bits in the map
	sob r2, engetLower
	br engetUpper				;proceed to calculate upper 4 bits

;gets higher 4 bits of output
engetUpper: cmp r4, #0		;if row of higher 4 bits is zero, the loop is finished
	beq enFinal
	add #4, r5				;4 is added to the r5 register to get the place of the higher bits in the map
	sob r4, engetUpper
	br enFinal				;the serial place of the lower 4 bits in the map is stored in r3, and that of the higher - in r5
	
;calculates output byte and stores it in the output label
;checks if program has completed its operation
enFinal:
	add 14(sp), r3		;the address of the first key is added to r3 to get the address of the value of lower 4 bits
	add 14(sp), r5		;the address of the first key is added to r5 to get the address of the value of upper 4 bits
	movb (r3), r2			;r2 now stores value of lower 4 bits
	movb (r5), r4			;r4 now stores value of higher 4 bits
	ash #4, r4				;r4 is shifted 4 times to the left to enable addition of lower 4 bits
	add r2, r4				;r4 now stores 8 bits: first the lower 4, and then the upper 4. This is the needed result.
	mov 16(sp), r1			;address of first Output byte is added to r1
	movb r4, (r1)			;the encryption/decryption result is saved in the Output label 
	mov (sp)+, r5
	mov (sp)+, r4
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	rts pc

. = torg + 6776
